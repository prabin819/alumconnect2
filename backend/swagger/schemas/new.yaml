# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     CreateUserInput:
#  *       type: object
#  *       required:
#  *         - email
#  *         - password
#  *         - name
#  *       properties:
#  *         email:
#  *           type: string
#  *           format: email
#  *           example: "admin@example.com"
#  *         password:
#  *           type: string
#  *           minLength: 8
#  *           example: "securePassword123"
#  *         name:
#  *           type: string
#  *           minLength: 2
#  *           example: "Admin User"
#  *
#  *     User:
#  *       type: object
#  *       properties:
#  *         _id:
#  *           type: string
#  *           example: "507f1f77bcf86cd799439011"
#  *         email:
#  *           type: string
#  *           example: "admin@example.com"
#  *         name:
#  *           type: string
#  *           example: "Admin User"
#  *         userType:
#  *           type: string
#  *           enum: [Admin, Alumni, Student]
#  *           example: "Admin"
#  *         isVerified:
#  *           type: boolean
#  *           example: false
#  *         createdAt:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-07-15T10:00:00Z"
#  *         updatedAt:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-07-15T10:00:00Z"
#  */

components:
  schemas:
    CreateUserInput:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          example: 'admin@example.com'
        password:
          type: string
          minLength: 8
          example: 'securePassword123'
        name:
          type: string
          minLength: 2
          example: 'Admin User'

    User:
      type: object
      properties:
        _id:
          type: string
          example: '507f1f77bcf86cd799439011'
        email:
          type: string
          example: 'admin@example.com'
        name:
          type: string
          example: 'Admin User'
        userType:
          type: string
          enum: [Admin, Alumni, Student]
          example: 'Admin'
        isVerified:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2023-07-15T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-07-15T10:00:00Z'
# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     UserDetails:
#  *       type: object
#  *       properties:
#  *         _id:
#  *           type: string
#  *           example: "507f1f77bcf86cd799439011"
#  *         email:
#  *           type: string
#  *           example: "user@example.com"
#  *         name:
#  *           type: string
#  *           example: "John Doe"
#  *         userType:
#  *           type: string
#  *           enum: [Admin, Alumni, Student]
#  *           example: "Alumni"
#  *         profilePicture:
#  *           type: string
#  *           example: "https://example.com/profile.jpg"
#  *         bio:
#  *           type: string
#  *           example: "Alumni from 2015, currently working at Tech Corp"
#  *         isVerified:
#  *           type: boolean
#  *           example: true
#  *         createdAt:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-01-15T10:00:00Z"
#  *         updatedAt:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-06-20T15:30:00Z"
#  *       description: Full user details (excluding sensitive fields like password)
#  */

components:
  schemas:
    UserDetails:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        userType:
          type: string
          enum: [Admin, Alumni, Student]
          example: "Alumni"
        profilePicture:
          type: string
          example: "https://example.com/profile.jpg"
        bio:
          type: string
          example: "Alumni from 2015, currently working at Tech Corp"
        isVerified:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2023-01-15T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-06-20T15:30:00Z"
      description: Full user details (excluding sensitive fields like password)
ChangePasswordRequest:
  type: object
  required:
    - oldPassword
    - newPassword
  properties:
    oldPassword:
      $ref: '#/components/schemas/Password'
    newPassword:
      $ref: '#/components/schemas/Password'
ChangePasswordResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      type: object
      example: {}
    message:
      type: string
      example: 'Password changed successfully'
    success:
      type: boolean
      example: true
ProfilePictureUpdateResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      $ref: '#/components/schemas/ProfilePictureResponse'
    message:
      type: string
      example: 'Profile picture updated'
    success:
      type: boolean
      example: true
ProfilePictureResponse:
  type: object
  properties:
    path:
      type: string
      format: uri
      example: '/uploads/123456789-profilePicture.jpg'
DeleteProfilePictureResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      type: null
    message:
      type: string
      example: 'Profile picture deleted successfully'
    success:
      type: boolean
      example: true
DeleteUserResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 204
    data:
      type: object
      example: {}
    message:
      type: string
      example: 'User deleted successfully'
    success:
      type: boolean
      example: true
ForgotPasswordRequest:
  type: object
  required:
    - email
  properties:
    email:
      $ref: '#/components/schemas/Email'

ForgotPasswordResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      type: object
      example: {}
    message:
      type: string
      example: 'Email sent'
    success:
      type: boolean
      example: true
UserResponse:
  type: object
  properties:
    _id:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0j'
    email:
      $ref: '#/components/schemas/Email'
    name:
      $ref: '#/components/schemas/Name'
    userType:
      type: string
      enum: ['Student', 'Alumni', 'Admin']
      example: 'Student'
    profilePicture:
      type: string
      format: uri
      nullable: true
    isVerified:
      type: boolean
      example: false
    # Add other fields based on your User model
CurrentUserResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
    message:
      type: string
      example: 'Current user fetched successfully'
    success:
      type: boolean
      example: true
LoginRequest:
  type: object
  required:
    - email
    - password
  properties:
    email:
      $ref: '#/components/schemas/Email'
    password:
      $ref: '#/components/schemas/Password'

LoginResponse:
  type: object
  properties:
    accessToken:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    refreshToken:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    user:
      type: object
      properties:
        id:
          type: string
          example: '65a1f2b3c4d5e6f7g8h9i0j'
        name:
          $ref: '#/components/schemas/Name'
        email:
          $ref: '#/components/schemas/Email'
        userType:
          type: string
          enum: ['Student', 'Alumni', 'Admin']
          example: 'Student'
ErrorResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 400
    message:
      type: string
      example: 'Validation failed'
    errors:
      type: array
      items:
        type: object
        properties:
          field:
            type: string
            example: 'email'
          message:
            type: string
            example: 'Invalid email format'
LogoutResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    message:
      type: string
      example: 'User logged out successfully.'
    data:
      type: object
      example: {}
    success:
      type: boolean
      example: true
ErrorResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 401
    message:
      type: string
      example: 'Unauthorized request'
    errors:
      type: array
      items: {}
RefreshTokenRequest:
  type: object
  properties:
    refreshToken:
      type: string
      description: Required if not in cookies
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

RefreshTokenResponse:
  type: object
  properties:
    accessToken:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    refreshToken:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
TokenRefreshResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      $ref: '#/components/schemas/RefreshTokenResponse'
    message:
      type: string
      example: 'Access token refreshed successfully'
    success:
      type: boolean
      example: true
ResendVerificationResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      type: object
      example: {}
    message:
      type: string
      example: 'Verification email sent'
    success:
      type: boolean
      example: true
ResetPasswordRequest:
  type: object
  required:
    - password
  properties:
    password:
      $ref: '#/components/schemas/Password'

ResetPasswordResponse:
  type: object
  properties:
    accessToken:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    refreshToken:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    user:
      type: object
      properties:
        id:
          type: string
          example: '65a1f2b3c4d5e6f7g8h9i0j'
        name:
          $ref: '#/components/schemas/Name'
        email:
          $ref: '#/components/schemas/Email'
        userType:
          type: string
          enum: ['Student', 'Alumni', 'Admin']
          example: 'Student'
# Alumni-specific schemas
AlumniSignupRequest:
  type: object
  required:
    - email
    - password
    - name
    - graduationYear
    - degree
  properties:
    email:
      $ref: '#/components/schemas/Email'
    password:
      $ref: '#/components/schemas/Password'
    name:
      $ref: '#/components/schemas/Name'
    graduationYear:
      type: integer
      description: Year of graduation (must be ≥ 1900 and ≤ current year + 5)
      example: 2020
    degree:
      type: string
      minLength: 2
      maxLength: 100
      example: 'Computer Science'
    profilePicture:
      type: string
      format: uri
      description: Optional URL to profile picture
      example: 'https://example.com/profile.jpg'
    bio:
      type: string
      maxLength: 500
      description: Optional short bio
    company:
      type: string
      maxLength: 100
      example: 'Tech Corp'
    skills:
      type: array
      items:
        type: string
        maxLength: 50
      example: ['JavaScript', 'React']
AlumniSignupResponse:
  type: object
  properties:
    accessToken:
      type: string
      description: JWT access token
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    refreshToken:
      type: string
      description: JWT refresh token
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    user:
      type: object
      properties:
        _id:
          type: string
          example: '65a1f2b3c4d5e6f7g8h9i0j'
        email:
          $ref: '#/components/schemas/Email'
        name:
          $ref: '#/components/schemas/Name'
        userType:
          type: string
          enum: ['Alumni']
          example: 'Alumni'
        graduationYear:
          type: integer
          example: 2020
        isVerified:
          type: boolean
          example: false

ErrorResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 400
    message:
      type: string
      example: 'Validation failed'
    errors:
      type: array
      items:
        type: object
        properties:
          field:
            type: string
            example: 'email'
          message:
            type: string
            example: 'Invalid email format'
          code:
            type: string
            example: 'invalid_string'
StudentSignupResponse:
  type: object
  properties:
    accessToken:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    refreshToken:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    user:
      type: object
      properties:
        _id:
          type: string
          example: '65a1f2b3c4d5e6f7g8h9i0j'
        email:
          $ref: '#/components/schemas/Email'
        name:
          $ref: '#/components/schemas/Name'
        userType:
          type: string
          enum: ['Student']
        enrollmentYear:
          type: integer
          example: 2022
        expectedGraduationYear:
          type: integer
          example: 2026
        isVerified:
          type: boolean
          example: false
# Student-specific schemas
StudentSignupRequest:
  type: object
  required:
    - email
    - password
    - name
    - enrollmentYear
    - expectedGraduationYear
    - major
    - studentId
  properties:
    email:
      $ref: '#/components/schemas/Email'
    password:
      $ref: '#/components/schemas/Password'
    name:
      $ref: '#/components/schemas/Name'
    enrollmentYear:
      type: integer
      description: Year of enrollment (must be ≤ current year)
      example: 2022
    expectedGraduationYear:
      type: integer
      description: Future graduation year (must be > enrollmentYear)
      example: 2026
    major:
      type: string
      minLength: 2
      maxLength: 100
      example: 'Computer Science'
    studentId:
      type: string
      minLength: 3
      maxLength: 20
      pattern: "^[A-Za-z0-9\\-_]+$"
      example: 'CS-2022-001'
    profilePicture:
      type: string
      format: uri
      description: Optional profile picture URL
    bio:
      type: string
      maxLength: 500
    interests:
      type: array
      items:
        type: string
        maxLength: 50
      example: ['Web Development', 'AI']
UpdateAlumniRequest:
  type: object
  properties:
    name:
      $ref: '#/components/schemas/Name'
    bio:
      type: string
      maxLength: 500
      example: 'Experienced software engineer with 5+ years in web development'
    isActive:
      type: boolean
      default: true
    graduationYear:
      $ref: '#/components/schemas/GraduationYear'
    degree:
      type: string
      minLength: 2
      maxLength: 100
      example: 'Computer Science'
    company:
      type: string
      maxLength: 100
      example: 'Tech Corp'
    position:
      type: string
      maxLength: 100
      example: 'Senior Developer'
    industry:
      type: string
      maxLength: 50
      example: 'Information Technology'
    linkedIn:
      type: string
      format: uri
      example: 'https://linkedin.com/in/username'
    skills:
      type: array
      items:
        type: string
        maxLength: 50
      example: ['JavaScript', 'Node.js']
UpdateAlumniResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      $ref: '#/components/schemas/AlumniResponse' # Reuse your existing Alumni response schema
    message:
      type: string
      example: 'Account details updated successfully'
    success:
      type: boolean
      example: true
UpdateStudentRequest:
  type: object
  properties:
    name:
      $ref: '#/components/schemas/Name'
    bio:
      type: string
      maxLength: 500
      example: 'Computer Science student passionate about AI'
    isActive:
      type: boolean
      default: true
    enrollmentYear:
      type: integer
      minimum: 2000
      maximum: 2024
      example: 2022
    expectedGraduationYear:
      type: integer
      minimum: 2024
      maximum: 2030
      example: 2026
    major:
      type: string
      minLength: 2
      maxLength: 100
      example: 'Computer Science'
    studentId:
      type: string
      pattern: "^[A-Za-z0-9\\-_]+$"
      example: 'CS-2022-001'
    interests:
      type: array
      items:
        type: string
        maxLength: 50
      example: ['Machine Learning', 'Web Development']
UpdateStudentResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      $ref: '#/components/schemas/StudentResponse' # Reuse your existing Student response schema
    message:
      type: string
      example: 'Account details updated successfully'
    success:
      type: boolean
      example: true
VerifyEmailResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      type: object
      example: {}
    message:
      type: string
      example: 'Email verification successful'
    success:
      type: boolean
      example: true
Email:
  type: string
  format: email
  example: 'user@example.com'
Password:
  type: string
  minLength: 8
  example: 'SecurePassword123!'
Name:
  type: string
  minLength: 2
  maxLength: 100
  example: 'John Doe'
# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     ContactInput:
#  *       type: object
#  *       required:
#  *         - name
#  *         - email
#  *         - subject
#  *         - message
#  *       properties:
#  *         name:
#  *           type: string
#  *           minLength: 2
#  *           maxLength: 50
#  *           example: "John Doe"
#  *         email:
#  *           type: string
#  *           format: email
#  *           example: "john@example.com"
#  *         subject:
#  *           type: string
#  *           minLength: 5
#  *           maxLength: 100
#  *           example: "Question about alumni benefits"
#  *         message:
#  *           type: string
#  *           minLength: 10
#  *           maxLength: 1000
#  *           example: "I would like to know more about the mentorship program"
#  *
#  *     Contact:
#  *       type: object
#  *       properties:
#  *         _id:
#  *           type: string
#  *           example: "507f1f77bcf86cd799439011"
#  *         name:
#  *           type: string
#  *           example: "John Doe"
#  *         email:
#  *           type: string
#  *           example: "john@example.com"
#  *         subject:
#  *           type: string
#  *           example: "Question about alumni benefits"
#  *         message:
#  *           type: string
#  *           example: "I would like to know more about..."
#  *         status:
#  *           type: string
#  *           enum: [New, In Progress, Resolved]
#  *           example: "New"
#  *         responded:
#  *           type: boolean
#  *           example: false
#  *         response:
#  *           type: string
#  *           example: ""
#  *         createdAt:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-07-15T10:00:00Z"
#  */

ContactInput:
  type: object
  required:
    - name
    - email
    - subject
    - message
  properties:
    name:
      type: string
      minLength: 2
      maxLength: 50
      example: 'John Doe'
    email:
      type: string
      format: email
      example: 'john@example.com'
    subject:
      type: string
      minLength: 5
      maxLength: 100
      example: 'Question about alumni benefits'
    message:
      type: string
      minLength: 10
      maxLength: 1000
      example: 'I would like to know more about the mentorship program'

Contact:
  type: object
  properties:
    _id:
      type: string
      example: '507f1f77bcf86cd799439011'
    name:
      type: string
      example: 'John Doe'
    email:
      type: string
      example: 'john@example.com'
    subject:
      type: string
      example: 'Question about alumni benefits'
    message:
      type: string
      example: 'I would like to know more about...'
    status:
      type: string
      enum: [New, In Progress, Resolved]
      example: 'New'
    responded:
      type: boolean
      example: false
    response:
      type: string
      example: ''
    createdAt:
      type: string
      format: date-time
      example: '2023-07-15T10:00:00Z'

# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     UpdateContactStatusInput:
#  *       type: object
#  *       properties:
#  *         status:
#  *           type: string
#  *           enum: [New, In Progress, Resolved]
#  *           example: "In Progress"
#  *         response:
#  *           type: string
#  *           example: "We're looking into your inquiry and will respond soon"
#  *       required:
#  *         - status
#  */

UpdateContactStatusInput:
  type: object
  properties:
    status:
      type: string
      enum: [New, In Progress, Resolved]
      example: 'In Progress'
    response:
      type: string
      example: "We're looking into your inquiry and will respond soon"
  required:
    - status
# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     Event:
#  *       type: object
#  *       properties:
#  *         _id:
#  *           type: string
#  *           example: "507f1f77bcf86cd799439011"
#  *         title:
#  *           type: string
#  *           example: "Annual Alumni Meet"
#  *         description:
#  *           type: string
#  *           example: "Join us for our yearly alumni gathering"
#  *         startDate:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-12-15T18:00:00.000Z"
#  *         endDate:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-12-15T22:00:00.000Z"
#  *         location:
#  *           type: string
#  *           example: "Campus Auditorium"
#  *         isVirtual:
#  *           type: boolean
#  *           example: false
#  *         meetingLink:
#  *           type: string
#  *           example: ""
#  *         maxAttendees:
#  *           type: integer
#  *           example: 100
#  *         category:
#  *           type: string
#  *           enum: [networking, workshop, seminar, social, conference, other]
#  *           example: "social"
#  *         imageUrl:
#  *           type: string
#  *           example: "https://example.com/event1.jpg"
#  *         createdBy:
#  *           type: object
#  *           properties:
#  *             id:
#  *               type: string
#  *               example: "507f1f77bcf86cd799439012"
#  *             userType:
#  *               type: string
#  *               enum: [alumni, student]
#  *               example: "alumni"
#  *             name:
#  *               type: string
#  *               example: "John Doe"
#  *         attendees:
#  *           type: array
#  *           items:
#  *             type: object
#  *             properties:
#  *               userId:
#  *                 type: string
#  *                 example: "507f1f77bcf86cd799439013"
#  *               userType:
#  *                 type: string
#  *                 enum: [alumni, student]
#  *                 example: "student"
#  *               registeredAt:
#  *                 type: string
#  *                 format: date-time
#  *                 example: "2023-11-01T10:00:00.000Z"
#  *               name:
#  *                 type: string
#  *                 example: "Jane Smith"
#  *         isActive:
#  *           type: boolean
#  *           example: true
#  *         createdAt:
#  *           type: string
#  *           format: date-time
#  *         updatedAt:
#  *           type: string
#  *           format: date-time
#  */

Event:
  type: object
  properties:
    _id:
      type: string
      example: '507f1f77bcf86cd799439011'
    title:
      type: string
      example: 'Annual Alumni Meet'
    description:
      type: string
      example: 'Join us for our yearly alumni gathering'
    startDate:
      type: string
      format: date-time
      example: '2023-12-15T18:00:00.000Z'
    endDate:
      type: string
      format: date-time
      example: '2023-12-15T22:00:00.000Z'
    location:
      type: string
      example: 'Campus Auditorium'
    isVirtual:
      type: boolean
      example: false
    meetingLink:
      type: string
      example: ''
    maxAttendees:
      type: integer
      example: 100
    category:
      type: string
      enum: [networking, workshop, seminar, social, conference, other]
      example: 'social'
    imageUrl:
      type: string
      example: 'https://example.com/event1.jpg'
    createdBy:
      type: object
      properties:
        id:
          type: string
          example: '507f1f77bcf86cd799439012'
        userType:
          type: string
          enum: [alumni, student]
          example: 'alumni'
        name:
          type: string
          example: 'John Doe'
    attendees:
      type: array
      items:
        type: object
        properties:
          userId:
            type: string
            example: '507f1f77bcf86cd799439013'
          userType:
            type: string
            enum: [alumni, student]
            example: 'student'
          registeredAt:
            type: string
            format: date-time
            example: '2023-11-01T10:00:00.000Z'
          name:
            type: string
            example: 'Jane Smith'
    isActive:
      type: boolean
      example: true
    createdAt:
      type: string
      format: date-time
    updatedAt:
      type: string
      format: date-time

# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     EventWithDetails:
#  *       allOf:
#  *         - $ref: '#/components/schemas/Event'
#  *         - type: object
#  *           properties:
#  *             createdBy:
#  *               type: object
#  *               properties:
#  *                 id:
#  *                   type: string
#  *                   example: "507f1f77bcf86cd799439012"
#  *                 userType:
#  *                   type: string
#  *                   enum: [alumni, student]
#  *                   example: "alumni"
#  *                 name:
#  *                   type: string
#  *                   example: "John Doe"
#  *                 email:
#  *                   type: string
#  *                   format: email
#  *                   example: "john@example.com"
#  *             attendees:
#  *               type: array
#  *               items:
#  *                 type: object
#  *                 properties:
#  *                   userId:
#  *                     type: string
#  *                     example: "507f1f77bcf86cd799439013"
#  *                   userType:
#  *                     type: string
#  *                     enum: [alumni, student]
#  *                     example: "student"
#  *                   registeredAt:
#  *                     type: string
#  *                     format: date-time
#  *                     example: "2023-11-01T10:00:00.000Z"
#  *                   name:
#  *                     type: string
#  *                     example: "Jane Smith"
#  */

EventWithDetails:
  allOf:
    - $ref: '#/components/schemas/Event'
    - type: object
      properties:
        createdBy:
          type: object
          properties:
            id:
              type: string
              example: '507f1f77bcf86cd799439012'
            userType:
              type: string
              enum: [alumni, student]
              example: 'alumni'
            name:
              type: string
              example: 'John Doe'
            email:
              type: string
              format: email
              example: 'john@example.com'
        attendees:
          type: array
          items:
            type: object
            properties:
              userId:
                type: string
                example: '507f1f77bcf86cd799439013'
              userType:
                type: string
                enum: [alumni, student]
                example: 'student'
              registeredAt:
                type: string
                format: date-time
                example: '2023-11-01T10:00:00.000Z'
              name:
                type: string
                example: 'Jane Smith'

# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     UpdateEventInput:
#  *       type: object
#  *       properties:
#  *         title:
#  *           type: string
#  *           minLength: 5
#  *           maxLength: 100
#  *           example: "Updated Alumni Meet"
#  *         description:
#  *           type: string
#  *           minLength: 20
#  *           example: "Updated description with new schedule"
#  *         startDate:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-12-16T18:00:00Z"
#  *         endDate:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-12-16T22:00:00Z"
#  *         location:
#  *           type: string
#  *           minLength: 3
#  *           example: "Updated Venue"
#  *         isVirtual:
#  *           type: boolean
#  *           example: false
#  *         meetingLink:
#  *           type: string
#  *           format: uri
#  *           example: "https://new-meet.example.com/alumni-2023"
#  *         maxAttendees:
#  *           type: integer
#  *           minimum: 1
#  *           example: 150
#  *         category:
#  *           type: string
#  *           enum: [networking, workshop, seminar, social, conference, other]
#  *           example: "social"
#  *         imageUrl:
#  *           type: string
#  *           format: uri
#  *           example: "https://example.com/new-event-image.jpg"
#  *         isActive:
#  *           type: boolean
#  *           description: Set event visibility status
#  *           example: true
#  */

UpdateEventInput:
  type: object
  properties:
    title:
      type: string
      minLength: 5
      maxLength: 100
      example: 'Updated Alumni Meet'
    description:
      type: string
      minLength: 20
      example: 'Updated description with new schedule'
    startDate:
      type: string
      format: date-time
      example: '2023-12-16T18:00:00Z'
    endDate:
      type: string
      format: date-time
      example: '2023-12-16T22:00:00Z'
    location:
      type: string
      minLength: 3
      example: 'Updated Venue'
    isVirtual:
      type: boolean
      example: false
    meetingLink:
      type: string
      format: uri
      example: 'https://new-meet.example.com/alumni-2023'
    maxAttendees:
      type: integer
      minimum: 1
      example: 150
    category:
      type: string
      enum: [networking, workshop, seminar, social, conference, other]
      example: 'social'
    imageUrl:
      type: string
      format: uri
      example: 'https://example.com/new-event-image.jpg'
    isActive:
      type: boolean
      description: Set event visibility status
      example: true
# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     Job:
#  *       type: object
#  *       properties:
#  *         _id:
#  *           type: string
#  *           example: "5f8d04b3ab35de3a3427d9f3"
#  *         title:
#  *           type: string
#  *           example: "Senior Software Engineer"
#  *         description:
#  *           type: string
#  *           example: "Looking for an experienced software engineer..."
#  *         company:
#  *           type: string
#  *           example: "Tech Corp"
#  *         location:
#  *           type: string
#  *           example: "San Francisco, CA"
#  *         jobType:
#  *           type: string
#  *           enum: [full-time, part-time, contract, internship]
#  *           example: "full-time"
#  *         salary:
#  *           type: string
#  *           example: "$120,000 - $150,000 per year"
#  *         applicationDeadline:
#  *           type: string
#  *           format: date-time
#  *           example: "2023-12-31T00:00:00.000Z"
#  *         requirements:
#  *           type: array
#  *           items:
#  *             type: string
#  *           example: ["5+ years experience", "Node.js proficiency"]
#  *         createdBy:
#  *           $ref: '#/components/schemas/UserBasicInfo'
#  *         isActive:
#  *           type: boolean
#  *           example: true
#  *         createdAt:
#  *           type: string
#  *           format: date-time
#  *         updatedAt:
#  *           type: string
#  *           format: date-time
#  *
#  *     UserBasicInfo:
#  *       type: object
#  *       properties:
#  *         _id:
#  *           type: string
#  *           example: "5f8d04b3ab35de3a3427d9f3"
#  *         name:
#  *           type: string
#  *           example: "John Doe"
#  *         company:
#  *           type: string
#  *           example: "Tech Corp"
#  *         position:
#  *           type: string
#  *           example: "CTO"
#  *         email:
#  *           type: string
#  *           example: "john@techcorp.com"
#  *         linkedIn:
#  *           type: string
#  *           example: "https://linkedin.com/in/johndoe"
#  *
#  *     ApiError:
#  *       type: object
#  *       properties:
#  *         statusCode:
#  *           type: integer
#  *         message:
#  *           type: string
#  *         success:
#  *           type: boolean
#  *
#  *   securitySchemes:
#  *     bearerAuth:
#  *       type: http
#  *       scheme: bearer
#  *       bearerFormat: JWT
#  */

Job:
  type: object
  properties:
    _id:
      type: string
      example: '5f8d04b3ab35de3a3427d9f3'
    title:
      type: string
      example: 'Senior Software Engineer'
    description:
      type: string
      example: 'Looking for an experienced software engineer...'
    company:
      type: string
      example: 'Tech Corp'
    location:
      type: string
      example: 'San Francisco, CA'
    jobType:
      type: string
      enum: [full-time, part-time, contract, internship]
      example: 'full-time'
    salary:
      type: string
      example: '$120,000 - $150,000 per year'
    applicationDeadline:
      type: string
      format: date-time
      example: '2023-12-31T00:00:00.000Z'
    requirements:
      type: array
      items:
        type: string
      example:
        - '5+ years experience'
        - 'Node.js proficiency'
    createdBy:
      $ref: '#/components/schemas/UserBasicInfo'
    isActive:
      type: boolean
      example: true
    createdAt:
      type: string
      format: date-time
    updatedAt:
      type: string
      format: date-time

UserBasicInfo:
  type: object
  properties:
    _id:
      type: string
      example: '5f8d04b3ab35de3a3427d9f3'
    name:
      type: string
      example: 'John Doe'
    company:
      type: string
      example: 'Tech Corp'
    position:
      type: string
      example: 'CTO'
    email:
      type: string
      example: 'john@techcorp.com'
    linkedIn:
      type: string
      example: 'https://linkedin.com/in/johndoe'

ApiError:
  type: object
  properties:
    statusCode:
      type: integer
    message:
      type: string
    success:
      type: boolean

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     CreateJobInput:
#  *       type: object
#  *       required:
#  *         - title
#  *         - description
#  *         - company
#  *         - location
#  *         - jobType
#  *         - applicationDeadline
#  *       properties:
#  *         title:
#  *           type: string
#  *           minLength: 5
#  *           maxLength: 100
#  *           example: "Senior Software Engineer"
#  *         description:
#  *           type: string
#  *           minLength: 20
#  *           example: "Looking for an experienced engineer with Node.js skills..."
#  *         company:
#  *           type: string
#  *           minLength: 2
#  *           maxLength: 50
#  *           example: "Tech Innovations Inc."
#  *         location:
#  *           type: string
#  *           minLength: 3
#  *           maxLength: 100
#  *           example: "Remote, US"
#  *         jobType:
#  *           type: string
#  *           enum: [full-time, part-time, contract, internship]
#  *           example: "full-time"
#  *         salary:
#  *           type: string
#  *           maxLength: 50
#  *           example: "$120,000 - $150,000 per year"
#  *         applicationDeadline:
#  *           type: string
#  *           format: date-time
#  *           description: Must be a future date
#  *           example: "2023-12-31T00:00:00.000Z"
#  *         requirements:
#  *           type: array
#  *           items:
#  *             type: string
#  *             maxLength: 100
#  *           example: ["5+ years experience", "Node.js proficiency"]
#  *         applicationLink:
#  *           type: string
#  *           format: uri
#  *           maxLength: 255
#  *           example: "https://company.com/careers/123"
#  */

CreateJobInput:
  type: object
  required:
    - title
    - description
    - company
    - location
    - jobType
    - applicationDeadline
  properties:
    title:
      type: string
      minLength: 5
      maxLength: 100
      example: 'Senior Software Engineer'
    description:
      type: string
      minLength: 20
      example: 'Looking for an experienced engineer with Node.js skills...'
    company:
      type: string
      minLength: 2
      maxLength: 50
      example: 'Tech Innovations Inc.'
    location:
      type: string
      minLength: 3
      maxLength: 100
      example: 'Remote, US'
    jobType:
      type: string
      enum: [full-time, part-time, contract, internship]
      example: 'full-time'
    salary:
      type: string
      maxLength: 50
      example: '$120,000 - $150,000 per year'
    applicationDeadline:
      type: string
      format: date-time
      description: Must be a future date
      example: '2023-12-31T00:00:00.000Z'
    requirements:
      type: array
      items:
        type: string
        maxLength: 100
      example:
        - '5+ years experience'
        - 'Node.js proficiency'
    applicationLink:
      type: string
      format: uri
      maxLength: 255
      example: 'https://company.com/careers/123'

# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     UpdateJobInput:
#  *       type: object
#  *       properties:
#  *         title:
#  *           type: string
#  *           minLength: 5
#  *           maxLength: 100
#  *           example: "Updated Senior Software Engineer Position"
#  *         description:
#  *           type: string
#  *           minLength: 20
#  *           example: "Updated description with new requirements..."
#  *         company:
#  *           type: string
#  *           minLength: 2
#  *           maxLength: 50
#  *           example: "Updated Tech Corp"
#  *         location:
#  *           type: string
#  *           minLength: 3
#  *           maxLength: 100
#  *           example: "Remote, Worldwide"
#  *         jobType:
#  *           type: string
#  *           enum: [full-time, part-time, contract, internship]
#  *           example: "contract"
#  *         salary:
#  *           type: string
#  *           maxLength: 50
#  *           example: "$100 - $150 per hour"
#  *         applicationDeadline:
#  *           type: string
#  *           format: date-time
#  *           description: Must be a future date
#  *           example: "2023-12-15T00:00:00.000Z"
#  *         requirements:
#  *           type: array
#  *           items:
#  *             type: string
#  *             maxLength: 100
#  *           example: ["3+ years experience", "React expertise"]
#  *         applicationLink:
#  *           type: string
#  *           format: uri
#  *           maxLength: 255
#  *           example: "https://updated-company.com/careers/456"
#  *         isActive:
#  *           type: boolean
#  *           description: Whether the job posting should be visible
#  *           example: true
#  */

UpdateJobInput:
  type: object
  properties:
    title:
      type: string
      minLength: 5
      maxLength: 100
      example: 'Updated Senior Software Engineer Position'
    description:
      type: string
      minLength: 20
      example: 'Updated description with new requirements...'
    company:
      type: string
      minLength: 2
      maxLength: 50
      example: 'Updated Tech Corp'
    location:
      type: string
      minLength: 3
      maxLength: 100
      example: 'Remote, Worldwide'
    jobType:
      type: string
      enum: [full-time, part-time, contract, internship]
      example: 'contract'
    salary:
      type: string
      maxLength: 50
      example: '$100 - $150 per hour'
    applicationDeadline:
      type: string
      format: date-time
      description: Must be a future date
      example: '2023-12-15T00:00:00.000Z'
    requirements:
      type: array
      items:
        type: string
        maxLength: 100
      example:
        - '3+ years experience'
        - 'React expertise'
    applicationLink:
      type: string
      format: uri
      maxLength: 255
      example: 'https://updated-company.com/careers/456'
    isActive:
      type: boolean
      description: Whether the job posting should be visible
      example: true
CommentRequest:
  type: object
  required:
    - text
  properties:
    text:
      type: string
      minLength: 1
      maxLength: 1000
      example: 'This is an insightful article!'

CommentResponse:
  type: object
  properties:
    _id:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0k'
    text:
      type: string
      example: 'This is an insightful article!'
    name:
      type: string
      example: 'John Doe'
    userType:
      type: string
      enum: ['alumni', 'student']
      example: 'alumni'
    createdAt:
      type: string
      format: date-time
      example: '2023-12-20T10:30:00Z'
CreateNewsRequest:
  type: object
  required:
    - title
    - content
    - summary
  properties:
    title:
      $ref: '#/components/schemas/Title'
    content:
      $ref: '#/components/schemas/Content'
    summary:
      $ref: '#/components/schemas/Summary'
    imageUrl:
      $ref: '#/components/schemas/ImageUrl'
    tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      example: ['scholarship', 'computer-science']
    category:
      $ref: '#/components/schemas/Category'

CreateNewsResponse:
  type: object
  properties:
    _id:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0j'
    title:
      $ref: '#/components/schemas/Title'
    content:
      $ref: '#/components/schemas/Content'
    createdBy:
      $ref: '#/components/schemas/Creator'
    createdAt:
      type: string
      format: date-time
      example: '2023-12-18T10:30:00Z'
DeleteNewsResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      type: null
    message:
      type: string
      example: 'News deleted successfully'
    success:
      type: boolean
      example: true
NewsResponse:
  type: object
  properties:
    _id:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0j'
    title:
      $ref: '#/components/schemas/Title'
    content:
      $ref: '#/components/schemas/Content'
    summary:
      $ref: '#/components/schemas/Summary'
    imageUrl:
      $ref: '#/components/schemas/ImageUrl'
    category:
      $ref: '#/components/schemas/Category'
    viewCount:
      type: integer
      example: 150
    likes:
      type: array
      items:
        $ref: '#/components/schemas/Like'
    createdBy:
      $ref: '#/components/schemas/Creator'
    createdAt:
      type: string
      format: date-time
    updatedAt:
      type: string
      format: date-time

NewsListResponse:
  type: array
  items:
    $ref: '#/components/schemas/NewsResponse'
# Main response schemas
NewsResponse:
  type: object
  properties:
    _id:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0j'
    title:
      $ref: '#/components/schemas/Title'
    content:
      $ref: '#/components/schemas/Content'
    summary:
      $ref: '#/components/schemas/Summary'
    imageUrl:
      $ref: '#/components/schemas/ImageUrl'
    category:
      $ref: '#/components/schemas/Category'
    viewCount:
      type: integer
      example: 150
    likes:
      type: array
      items:
        $ref: '#/components/schemas/Like'
    createdBy:
      $ref: '#/components/schemas/Creator'
    createdAt:
      type: string
      format: date-time
      example: '2023-12-15T10:30:00Z'

NewsListResponse:
  type: array
  items:
    $ref: '#/components/schemas/NewsResponse'

NewsQueryParams:
  type: object
  properties:
    search:
      type: string
      description: Search term for full-text search
      example: 'scholarship'
    category:
      type: string
      enum: ['academic', 'career', 'announcement', 'achievement', 'general']
      description: Filter by category
      example: 'academic'
    sortBy:
      type: string
      enum: ['latest', 'popular']
      description: |
        Sort order:
        - latest = newest first
        - popular = most views first
      example: 'latest'
NewsDetailResponse:
  type: object
  properties:
    _id:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0j'
    title:
      $ref: '#/components/schemas/Title'
    content:
      $ref: '#/components/schemas/Content'
    summary:
      $ref: '#/components/schemas/Summary'
    imageUrl:
      $ref: '#/components/schemas/ImageUrl'
    category:
      $ref: '#/components/schemas/Category'
    viewCount:
      type: integer
      example: 151
    likes:
      type: array
      items:
        $ref: '#/components/schemas/Like'
    comments:
      type: array
      items:
        type: object
        properties:
          text:
            type: string
            example: 'This is very helpful!'
          name:
            type: string
            example: 'Jane Smith'
          userType:
            type: string
            enum: ['student', 'alumni', 'admin']
            example: 'student'
          createdAt:
            type: string
            format: date-time
            example: '2023-12-16T08:45:00Z'
    createdBy:
      $ref: '#/components/schemas/Creator'
    createdAt:
      type: string
      format: date-time
      example: '2023-12-15T10:30:00Z'
UserNewsResponse:
  type: array
  items:
    $ref: '#/components/schemas/NewsResponse' # Reuse your existing NewsResponse schema
ToggleLikeResponse:
  type: object
  properties:
    statusCode:
      type: integer
      example: 200
    data:
      type: null
    message:
      type: string
      example: 'News liked successfully'
    success:
      type: boolean
      example: true
UpdateNewsRequest:
  type: object
  properties:
    title:
      $ref: '#/components/schemas/Title'
    content:
      $ref: '#/components/schemas/Content'
    summary:
      $ref: '#/components/schemas/Summary'
    imageUrl:
      $ref: '#/components/schemas/ImageUrl'
    tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      example: ['update', 'announcement']
    category:
      $ref: '#/components/schemas/Category'
    isPublished:
      type: boolean
      example: true

UpdateNewsResponse:
  type: object
  properties:
    _id:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0j'
    title:
      $ref: '#/components/schemas/Title'
    updatedAt:
      type: string
      format: date-time
      example: '2023-12-19T14:30:00Z'
# /**
#  * @swagger
#  * components:
#  *   schemas:
#  *     News:
#  *       type: object
#  *       properties:
#  *         _id:
#  *           type: string
#  *           example: "507f1f77bcf86cd799439011"
#  *         title:
#  *           type: string
#  *           example: "Annual Alumni Meet 2023"
#  *         content:
#  *           type: string
#  *           example: "Full content of the news article..."
#  *         summary:
#  *           type: string
#  *           maxLength: 300
#  *           example: "Summary of the news article in brief"
#  *         imageUrl:
#  *           type: string
#  *           example: "https://example.com/news1.jpg"
#  *         tags:
#  *           type: array
#  *           items:
#  *             type: string
#  *           example: ["alumni", "event"]
#  *         category:
#  *           type: string
#  *           enum: [academic, career, announcement, achievement, general]
#  *           example: "announcement"
#  *         createdBy:
#  *           type: object
#  *           properties:
#  *             id:
#  *               type: string
#  *               example: "507f1f77bcf86cd799439012"
#  *             userType:
#  *               type: string
#  *               enum: [alumni, student]
#  *               example: "alumni"
#  *             name:
#  *               type: string
#  *               example: "John Doe"
#  *         isPublished:
#  *           type: boolean
#  *           example: true
#  *         viewCount:
#  *           type: integer
#  *           example: 150
#  *         likes:
#  *           type: array
#  *           items:
#  *             type: object
#  *             properties:
#  *               userId:
#  *                 type: string
#  *                 example: "507f1f77bcf86cd799439013"
#  *               addedAt:
#  *                 type: string
#  *                 format: date-time
#  *                 example: "2023-07-15T10:00:00Z"
#  *         comments:
#  *           type: array
#  *           items:
#  *             type: object
#  *             properties:
#  *               commentId:
#  *                 type: string
#  *                 example: "507f1f77bcf86cd799439014"
#  *         createdAt:
#  *           type: string
#  *           format: date-time
#  *         updatedAt:
#  *           type: string
#  *           format: date-time
#  */

News:
  type: object
  properties:
    _id:
      type: string
      example: '507f1f77bcf86cd799439011'
    title:
      type: string
      example: 'Annual Alumni Meet 2023'
    content:
      type: string
      example: 'Full content of the news article...'
    summary:
      type: string
      maxLength: 300
      example: 'Summary of the news article in brief'
    imageUrl:
      type: string
      example: 'https://example.com/news1.jpg'
    tags:
      type: array
      items:
        type: string
      example: ['alumni', 'event']
    category:
      type: string
      enum: [academic, career, announcement, achievement, general]
      example: 'announcement'
    createdBy:
      type: object
      properties:
        id:
          type: string
          example: '507f1f77bcf86cd799439012'
        userType:
          type: string
          enum: [alumni, student]
          example: 'alumni'
        name:
          type: string
          example: 'John Doe'
    isPublished:
      type: boolean
      example: true
    viewCount:
      type: integer
      example: 150
    likes:
      type: array
      items:
        type: object
        properties:
          userId:
            type: string
            example: '507f1f77bcf86cd799439013'
          addedAt:
            type: string
            format: date-time
            example: '2023-07-15T10:00:00Z'
    comments:
      type: array
      items:
        type: object
        properties:
          commentId:
            type: string
            example: '507f1f77bcf86cd799439014'
    createdAt:
      type: string
      format: date-time
    updatedAt:
      type: string
      format: date-time

# Reusable component schemas (reference these with $ref)
Title:
  type: string
  minLength: 5
  maxLength: 200
  example: 'New Scholarship Program Announcement'

Content:
  type: string
  minLength: 50
  maxLength: 10000
  example: 'The university is pleased to announce...'

Summary:
  type: string
  maxLength: 300
  example: 'New scholarship opportunities for CS students'

ImageUrl:
  type: string
  format: uri
  example: 'https://example.com/news/scholarship.jpg'

Category:
  type: string
  enum: ['academic', 'career', 'announcement', 'achievement', 'general']
  example: 'academic'

Creator:
  type: object
  properties:
    id:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0j'
    name:
      type: string
      example: 'John Doe'
    userType:
      type: string
      enum: ['alumni', 'student', 'admin']
      example: 'admin'

Like:
  type: object
  properties:
    userId:
      type: string
      example: '65a1f2b3c4d5e6f7g8h9i0k'
    addedAt:
      type: string
      format: date-time
      example: '2023-12-15T10:30:00Z'

# /**
#  * @swagger
#  * components:
#  *   securitySchemes:
#  *     CookieAuth:
#  *       type: apiKey
#  *       in: cookie
#  *       name: accessToken
#  *     BearerAuth:
#  *       type: http
#  *       scheme: bearer
#  *       bearerFormat: JWT
#  *   schemas:
#  *     ApiResponse:
#  *       type: object
#  *       properties:
#  *         statusCode:
#  *           type: integer
#  *         data:
#  *           type: object
#  *           nullable: true
#  *         message:
#  *           type: string
#  *         success:
#  *           type: boolean
#  *     ApiError:
#  *       type: object
#  *       properties:
#  *         statusCode:
#  *           type: integer
#  *         data:
#  *           type: object
#  *           nullable: true
#  *         message:
#  *           type: string
#  *         success:
#  *           type: boolean
#  *         errors:
#  *           type: array
#  *           items:
#  *             type: string
#  */

securitySchemes:
  CookieAuth:
    type: apiKey
    in: cookie
    name: accessToken
    description: Authentication using access token stored in cookies.
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
    description: Bearer token authentication using JWT.

schemas:
  ApiResponse:
    type: object
    description: Standard API success response format.
    properties:
      statusCode:
        type: integer
        description: HTTP status code of the response.
        example: 200
      data:
        type: object
        nullable: true
        description: The actual payload or response data.
      message:
        type: string
        description: Human-readable message explaining the result.
        example: 'Operation successful'
      success:
        type: boolean
        description: Indicates if the operation was successful.
        example: true

  ApiError:
    type: object
    description: Standard API error response format.
    properties:
      statusCode:
        type: integer
        description: HTTP status code indicating the error.
        example: 400
      data:
        type: object
        nullable: true
        description: Optional data associated with the error.
      message:
        type: string
        description: Summary of the error.
        example: 'Validation failed'
      success:
        type: boolean
        description: Always false in case of errors.
        example: false
      errors:
        type: array
        description: List of detailed error messages.
        items:
          type: string
          example: 'Email field is required'
